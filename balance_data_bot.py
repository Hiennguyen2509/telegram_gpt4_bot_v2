import os
import telebot
import requests
import openai
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# L·∫•y API t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
AIRTABLE_API_KEY = os.getenv("AIRTABLE_API_KEY")
BASE_ID = os.getenv("AIRTABLE_BASE_ID")
TABLE_NAME = "T√†i Kho·∫£n Giao D·ªãch"

# Nh·∫≠p Token bot Telegram tr·ª±c ti·∫øp (kh√¥ng ƒë∆∞a v√†o bi·∫øn m√¥i tr∆∞·ªùng n·∫øu b·∫°n mu·ªën)
TELEGRAM_BOT_TOKEN = "8092143080:AAFm2YQ6qJvmAmuvlq1VG6SV_-MYMnzsC0E"

# Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c load ch∆∞a
if not all([OPENAI_API_KEY, AIRTABLE_API_KEY, BASE_ID]):
    raise ValueError("‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng! H√£y ki·ªÉm tra file .env ho·∫∑c c·∫•u h√¨nh tr√™n Railway.")

# Kh·ªüi t·∫°o bot Telegram
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

@bot.message_handler(content_types=['photo'])
def handle_photo_with_caption(message):
    """X·ª≠ l√Ω ·∫£nh v√† vƒÉn b·∫£n k√®m theo"""
    try:
        if not message.caption:
            bot.reply_to(message, "‚ùå B·∫°n c·∫ßn nh·∫≠p vƒÉn b·∫£n theo c·∫•u tr√∫c:\n`ID t√†i kho·∫£n - Balance`\nV√≠ d·ª•: `TK003 - 98687.78`")
            return

        text = message.caption.strip()
        if " - " not in text:
            bot.reply_to(message, "‚ùå Sai ƒë·ªãnh d·∫°ng. H√£y g·ª≠i theo m·∫´u:\n`ID t√†i kho·∫£n - Balance`\nV√≠ d·ª•: `TK003 - 98687.78`")
            return

        account_id, balance_str = text.split(" - ")
        account_id, balance_str = account_id.strip(), balance_str.strip()

        if not balance_str.replace(".", "").isdigit():
            bot.reply_to(message, "‚ùå S·ªë d∆∞ kh√¥ng h·ª£p l·ªá. H√£y ki·ªÉm tra l·∫°i tin nh·∫Øn.")
            return

        balance = float(balance_str)

        # Nh·∫≠n file ·∫£nh t·ª´ Telegram
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        image_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"

        # G·ª≠i ·∫£nh ƒë·∫øn GPT-4o ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu
        gpt_result = analyze_balance_image(image_url)

        if not gpt_result or "Balance:" not in gpt_result or "Account ID:" not in gpt_result:
            bot.reply_to(message, "‚ùå Kh√¥ng th·ªÉ x√°c minh d·ªØ li·ªáu t·ª´ ·∫£nh. H√£y th·ª≠ l·∫°i v·ªõi ·∫£nh r√µ h∆°n.")
            return

        # Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ k·∫øt qu·∫£ OCR
        lines = gpt_result.split(", ")
        gpt_balance = float(lines[0].split(": ")[1].replace(",", ""))
        gpt_account_id = lines[1].split(": ")[1].strip()

        if gpt_account_id != account_id or gpt_balance != balance:
            bot.reply_to(message, f"‚ùå D·ªØ li·ªáu kh√¥ng kh·ªõp!\nüìå **Tin nh·∫Øn:** {account_id} - {balance}\nüì∑ **·∫¢nh OCR:** {gpt_account_id} - {gpt_balance}")
            return

        # C·∫≠p nh·∫≠t Airtable
        success, error_message = update_airtable(account_id, balance)

        if success:
            bot.reply_to(message, f"‚úÖ ƒê√£ x√°c minh & c·∫≠p nh·∫≠t s·ªë d∆∞ {balance} cho t√†i kho·∫£n {account_id} v√†o Airtable.")
        else:
            bot.reply_to(message, f"‚ùå L·ªói c·∫≠p nh·∫≠t Airtable: {error_message}")

    except Exception as e:
        bot.reply_to(message, f"‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")

def analyze_balance_image(image_url):
    """G·ª≠i ·∫£nh ƒë·∫øn GPT-4o v√† tr√≠ch xu·∫•t Balance + ID t√†i kho·∫£n"""
    client = openai.OpenAI(api_key=OPENAI_API_KEY)

    prompt = """
B·∫°n l√† chuy√™n gia t√†i ch√≠nh. T√¥i s·∫Ω g·ª≠i m·ªôt ·∫£nh ch·ª•p m√†n h√¨nh t√†i kho·∫£n giao d·ªãch forex.  
H√£y tr√≠ch xu·∫•t **Balance (s·ªë d∆∞ t√†i kho·∫£n)** v√† **Account ID (ID t√†i kho·∫£n)** t·ª´ ·∫£nh n√†y.  

### üìå Y√™u c·∫ßu:
1Ô∏è‚É£ **Ch·ªâ tr√≠ch xu·∫•t s·ªë d∆∞ (Balance) v√† ID t√†i kho·∫£n, kh√¥ng l·∫•y c√°c th√¥ng tin kh√°c.**  
2Ô∏è‚É£ **Lo·∫°i b·ªè m·ªçi k√Ω t·ª± ƒë·∫∑c bi·ªát ho·∫∑c th√¥ng tin d∆∞ th·ª´a.**  
3Ô∏è‚É£ **N·∫øu kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu, h√£y tr·∫£ v·ªÅ `"L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin."`**  
4Ô∏è‚É£ **Tr·∫£ v·ªÅ theo ƒë·ªãnh d·∫°ng chu·∫©n sau:**
   - `Balance: <s·ªë d∆∞>, Account ID: <ID t√†i kho·∫£n>`  
   - **V√≠ d·ª• ƒë√∫ng:**  
     - `Balance: 98687.78, Account ID: TK003`  
     - `Balance: 102500.50, Account ID: FTMO789012`  
"""

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch t√†i kho·∫£n giao d·ªãch forex."},
            {"role": "user", "content": [
                {"type": "text", "text": prompt},
                {"type": "image_url", "image_url": {"url": image_url}}
            ]},
        ],
        max_tokens=1000
    )

    return response.choices[0].message.content if response.choices else None

def update_airtable(account_id, balance):
    """C·∫≠p nh·∫≠t s·ªë d∆∞ t√†i kho·∫£n l√™n Airtable"""

    # B∆∞·ªõc 1: T√¨m Record ID c·ªßa Account_ID
    search_url = f"https://api.airtable.com/v0/{BASE_ID}/{TABLE_NAME}?filterByFormula={{Account_ID}}='{account_id}'"
    headers = {"Authorization": f"Bearer {AIRTABLE_API_KEY}"}

    search_response = requests.get(search_url, headers=headers)
    
    if search_response.status_code != 200:
        return False, f"L·ªói t√¨m ki·∫øm Account_ID: {search_response.text}"

    records = search_response.json().get("records", [])
    
    if not records:
        return False, f"Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n {account_id} tr√™n Airtable."

    record_id = records[0]["id"]

    # B∆∞·ªõc 2: C·∫≠p nh·∫≠t Balance c·ªßa Account_ID ƒë√≥
    update_url = f"https://api.airtable.com/v0/{BASE_ID}/{TABLE_NAME}/{record_id}"
    balance = float(balance)  # ƒê·∫£m b·∫£o g·ª≠i s·ªë th·ª±c

    data = {
        "fields": {
            "Balance": balance
        }
    }

    try:
        update_response = requests.patch(update_url, json=data, headers=headers)
        if update_response.status_code == 200:
            return True, None  # Th√†nh c√¥ng
        else:
            return False, update_response.json().get("error", {}).get("message", "L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ Airtable")

    except requests.exceptions.RequestException as e:
        return False, str(e)  # L·ªói k·∫øt n·ªëi

# Ch·∫°y bot Telegram
bot.polling()
